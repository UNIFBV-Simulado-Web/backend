// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id                  Int           @id @default(autoincrement())
  title               String?
  discipline          String?
  language            String?
  year                Int
  context             String?       @db.Text
  correct_alternative String
  introduction        String?
  alternatives        Alternative[]
  files               File[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  UserAnswer UserAnswer[]

  @@map("questions")
}

model Alternative {
  id          Int     @id @default(autoincrement())
  question_id Int
  letter      String
  text        String? @db.Text
  is_correct  Boolean
  image       String?

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt
  UserAnswer UserAnswer[]

  @@unique([question_id, letter])
  @@map("alternatives")
}

model File {
  id          Int    @id @default(autoincrement())
  question_id Int
  link        String

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("files")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  nomeCompleto String
  senha        String
  UserAnswer   UserAnswer[]
}

model UserAnswer {
  id                    Int      @id @default(autoincrement())
  userId                Int
  questionId            Int
  selectedAlternativeId Int
  isCorrect             Boolean
  answeredAt            DateTime @default(now())

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  question            Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAlternative Alternative @relation(fields: [selectedAlternativeId], references: [id], onDelete: NoAction)
}
